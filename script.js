class VirtualMuseum {
    // –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å
enableEditMode() {
    this.editMode = true;
    console.log('üîß –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω!');
    console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–π –ø–æ –ø–∞–Ω–æ—Ä–∞–º–µ —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ–ª–æ—á–∫–∏');
    
    const container = this.renderer.domElement;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –±—ã–ª
    if (this.editClickListener) {
        container.removeEventListener('click', this.editClickListener);
    }
    
    this.editClickListener = (event) => {
        if (!this.editMode) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (-1 to +1)
        const mouse = new THREE.Vector2();
        const rect = container.getBoundingClientRect();
        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        
        console.log('üê≠ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏:', mouse);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–π–∫–∞—Å—Ç–µ—Ä
        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(mouse, this.camera);
        
        // –í–º–µ—Å—Ç–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ñ–µ—Ä—É –±–æ–ª—å—à–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const sphere = new THREE.Sphere(new THREE.Vector3(0, 0, 0), 100);
        const intersectionPoint = new THREE.Vector3();
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª—É—á–∞ —Å–æ —Å—Ñ–µ—Ä–æ–π
        raycaster.ray.at(10, intersectionPoint); // –ë–µ—Ä–µ–º —Ç–æ—á–∫—É –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10 –µ–¥–∏–Ω–∏—Ü
        
        // –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º —ç—Ç—É —Ç–æ—á–∫—É –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ–ª–∞ (y = -5)
        const direction = intersectionPoint.clone().normalize();
        const distanceToFloor = (-5 - this.camera.position.y) / direction.y;
        const floorPoint = new THREE.Vector3()
            .copy(this.camera.position)
            .add(direction.multiplyScalar(distanceToFloor));
        
        console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª—É:', {
            x: Math.round(floorPoint.x * 10) / 10,
            y: Math.round(floorPoint.y * 10) / 10, 
            z: Math.round(floorPoint.z * 10) / 10
        });
        
        // // –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        // this.addTempMarker(floorPoint);
        
        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.showDebugRay(raycaster.ray);
    };
    
    container.addEventListener('click', this.editClickListener);
}

    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.controls = null;
        this.currentPanorama = null;
        
        this.panoramas = {};
        this.hotspots = [];
        
        this.init();
    }
    
    init() {
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createControls();
        this.setupEventListeners();
        this.loadPanoramas();
        this.animate();
        
        this.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑–µ—è...');
    }
    
    createScene() {
        this.scene = new THREE.Scene();
    }
    
    createCamera() {
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.camera.position.set(0, 0, 0.1);
    }
    
    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        document.getElementById('container').appendChild(this.renderer.domElement);
    }
    
    createControls() {
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.rotateSpeed = 0.3;
        this.controls.enableZoom = true;
        this.controls.zoomSpeed = 0.5;
    }
    
    setupEventListeners() {
    window.addEventListener('resize', () => this.onWindowResize());
    
    document.getElementById('fullscreen').addEventListener('click', () => {
        this.toggleFullscreen();
    });
    
    
    // ‚òÖ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ö–û–î –ó–î–ï–°–¨ ‚òÖ‚òÖ‚òÖ‚òÖ
    document.addEventListener('keydown', (event) => {
        if (event.key === 'e' || event.key === '—É') { // E –∏–ª–∏ —Ä—É—Å—Å–∫–∞—è –£
            this.enableEditMode();
        }
        if (event.key === 'p' || event.key === '–∑') { // P –∏–ª–∏ —Ä—É—Å—Å–∫–∞—è –ó
            this.printCurrentPositions();
        }
        if (event.key === 'g' || event.key === '–ø') { // G –∏–ª–∏ —Ä—É—Å—Å–∫–∞—è –ü
            this.showFloorGrid();
        }
    });
    // ‚òÖ‚òÖ‚òÖ‚òÖ –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ‚òÖ‚òÖ‚òÖ‚òÖ
}
    
    loadPanoramas() {
        this.panoramas = {
            'hall1': {
                image: '/hall1.jpg',
                title: '–ú—É–∑–µ–π –ö–§ –†–ì–£ –°–æ—Ü–¢–µ—Ö',
                hotspots: [
                    { 
                        position: { x: -5, y: -3, z: -1.3 },
                        target: 'hall2', 
                        title: '–í–ø–µ—Ä–µ–¥',
                        type: 'forward'
                    },
                ]
            },
            'hall2': {
                image: '/hall2.jpg',
                title: '–ú—É–∑–µ–π –ö–§ –†–ì–£ –°–æ—Ü–¢–µ—Ö',
                hotspots: [
                    { 
                        position: { x: -4.2, y: -5, z: -0.3 },
                        target: 'hall1', 
                        title: '–ù–∞–∑–∞–¥',
                        type: 'forward'
                    },
                    { 
                        position: { x: 5.8, y: -5, z: 0.6 },
                        target: 'hall3', 
                        title: '–í–ø–µ—Ä–µ–¥',
                        type: 'forward'
                    }
                ]
            },
            'hall3': {
                image: '/hall3.jpg',
                title: '–ú—É–∑–µ–π –ö–§ –†–ì–£ –°–æ—Ü–¢–µ—Ö',
                hotspots: [
                    { 
                        position: { x: -4.7, y: -5, z: -5.3 },
                        target: 'hall2', 
                        title: '–ù–∞–∑–∞–¥',
                        type: 'forward'
                    },
                    { 
                        position: {x: 2, y: -5, z: 7.8 },
                        target: 'hall4', 
                        title: '–í–ø–µ—Ä–µ–¥',
                        type: 'forward'
                    }
                ]
            },
            'hall4': {
                image: '/hall4.jpg',
                title: '–ú—É–∑–µ–π –ö–§ –†–ì–£ –°–æ—Ü–¢–µ—Ö',
                hotspots: [
                    { 
                        position: { x: -2.3, y: -5, z: -6.5 },
                        target: 'hall3', 
                        title: '–ù–∞–∑–∞–¥',
                        type: 'forward'
                    },
                    { 
                        position: { x: 3.1, y: -5, z: 11.4 },
                        target: 'hall5', 
                        title: '–í–ø–µ—Ä–µ–¥',
                        type: 'forward'
                    }
                ]
            },
            'hall5': {
                image: '/hall5.jpg',
                title: '–ú—É–∑–µ–π –ö–§ –†–ì–£ –°–æ—Ü–¢–µ—Ö',
                hotspots: [
                    { 
                        position: { x: -11.8, y: -5, z: 1.8 },
                        target: 'hall4', 
                        title: '–ù–∞–∑–∞–¥',
                        type: 'forward'
                    },
                ]
            }
        };
        
        this.loadPanorama('hall1');
    }

    showFloorGrid() {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –ø–æ–ª–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞
    const gridHelper = new THREE.GridHelper(50, 50, 0x888888, 0x444444);
    gridHelper.position.y = -5;
    this.scene.add(gridHelper);
    
    // –°—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    const directions = [
        { color: 0xff0000, position: [0, -4, -10], label: '–í–ü–ï–†–ï–î' },
        { color: 0x00ff00, position: [-10, -4, 0], label: '–õ–ï–í–û' },
        { color: 0x0000ff, position: [10, -4, 0], label: '–ü–†–ê–í–û' },
        { color: 0xffff00, position: [0, -4, 10], label: '–ù–ê–ó–ê–î' }
    ];
    
    directions.forEach(dir => {
        const arrow = new THREE.ArrowHelper(
            new THREE.Vector3(dir.position[0], 0, dir.position[2]).normalize(),
            new THREE.Vector3(dir.position[0], dir.position[1], dir.position[2]),
            3,
            dir.color
        );
        this.scene.add(arrow);
    });
}
    
loadPanorama(panoramaId) {
    const panoramaData = this.panoramas[panoramaId];
    if (!panoramaData) {
        console.error('–ü–∞–Ω–æ—Ä–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', panoramaId);
        return;
    }

    this.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞...');
    
    // ‚òÖ‚òÖ‚òÖ‚òÖ –£–ë–ò–†–ê–ï–ú –í–°–Æ –ê–ù–ò–ú–ê–¶–ò–Æ - –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î ‚òÖ‚òÖ‚òÖ‚òÖ
    
    // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
    while(this.scene.children.length > 0) { 
        this.scene.remove(this.scene.children[0]); 
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏
    this.clearHotspots();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞–Ω–æ—Ä–∞–º—ã
    const textureLoader = new THREE.TextureLoader();
    textureLoader.load(panoramaData.image, (texture) => {
        texture.mapping = THREE.EquirectangularReflectionMapping;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º—ã
        const geometry = new THREE.SphereGeometry(500, 60, 40);
        geometry.scale(-1, 1, 1);
        
        const material = new THREE.MeshBasicMaterial({
            map: texture
        });
        
        const sphere = new THREE.Mesh(geometry, material);
        this.scene.add(sphere);
        
        this.currentPanorama = panoramaId;
        this.updateTitle(panoramaData.title);
        
        // ‚òÖ‚òÖ‚òÖ‚òÖ –°–†–ê–ó–£ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∏ ‚òÖ‚òÖ‚òÖ‚òÖ
        this.createHotspots(panoramaData.hotspots);
        
        this.hideLoading();
        
    }, undefined, (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã:', error);
        this.hideLoading();
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ' + panoramaData.image);
    });
}
    
    createHotspots(hotspotsData) {
    // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
    hotspotsData.forEach((hotspotData, index) => {
        this.createHotspot(hotspotData);
    });
    
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
    this.updateAllHotspots();
}

updateAllHotspots() {
    if (!this.currentPanorama) return;
    
    const panoramaData = this.panoramas[this.currentPanorama];
    if (!panoramaData || !panoramaData.hotspots) return;
    
    panoramaData.hotspots.forEach((hotspotData, index) => {
        if (this.hotspots[index]) {
            this.updateHotspotPosition(this.hotspots[index], hotspotData.position);
        }
    });
}
    
    createHotspot(hotspotData) {
        const hotspot = document.createElement('div');
        hotspot.className = 'floor-hotspot';
        hotspot.dataset.target = hotspotData.target;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç—Ä–µ–ª–∫–∏
        if (hotspotData.type) {
            hotspot.classList.add(`turn-${hotspotData.type}`);
        }
        
        const tooltip = document.createElement('div');
        tooltip.className = 'hotspot-tooltip';
        tooltip.textContent = hotspotData.title;
        hotspot.appendChild(tooltip);
        
        document.getElementById('container').appendChild(hotspot);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.hotspots.push(hotspot);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        hotspot.addEventListener('click', () => {
            this.loadPanorama(hotspotData.target);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        this.updateHotspotPosition(hotspot, hotspotData.position);
    }
    
    updateHotspotPosition(hotspot, worldPosition) {
        const vector = new THREE.Vector3(
            worldPosition.x,
            worldPosition.y,
            worldPosition.z
        );
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ
        vector.project(this.camera);
        
        const x = (vector.x * 0.5 + 0.5) * window.innerWidth;
        const y = (-vector.y * 0.5 + 0.5) * window.innerHeight;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π
        const isInFront = vector.z < 1;
        
        hotspot.style.left = (x - 30) + 'px';
        hotspot.style.top = (y - 30) + 'px';
        hotspot.style.display = isInFront ? 'flex' : 'none';
        
        // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        // const distance = Math.max(0, Math.min(1, 1 - vector.z));
        // hotspot.style.opacity = isInFront ? distance : '0';
    }
    
    clearHotspots() {
        this.hotspots.forEach(hotspot => {
            if (hotspot.parentNode) {
                hotspot.parentNode.removeChild(hotspot);
            }
        });
        this.hotspots = [];
    }
    
    updateHotspots() {
        if (!this.currentPanorama) return;
        
        const panoramaData = this.panoramas[this.currentPanorama];
        if (!panoramaData || !panoramaData.hotspots) return;
        
        panoramaData.hotspots.forEach((hotspotData, index) => {
            if (this.hotspots[index]) {
                this.updateHotspotPosition(this.hotspots[index], hotspotData.position);
            }
        });
    }
    
    updateTitle(title) {
        document.getElementById('title').textContent = title;
    }
    
    showLoading(message) {
        const loadingEl = document.getElementById('loading');
        loadingEl.textContent = message;
        loadingEl.style.display = 'block';
    }
    
    hideLoading() {
        document.getElementById('loading').style.display = 'none';
    }
    
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
                console.log('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', err);
            });
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
        }
    }
    
    onWindowResize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
//     fadeOut(callback, duration = 300) { // 300ms –≤–º–µ—Å—Ç–æ 500ms
//     const overlay = document.createElement('div');
//     overlay.style.cssText = `
//         position: fixed; 
//         top: 0; 
//         left: 0; 
//         width: 100%; 
//         height: 100%; 
//         background: black; 
//         z-index: 9999;
//         opacity: 0; 
//         transition: opacity ${duration}ms ease-out; /* ease-out –±—ã—Å—Ç—Ä–µ–µ */
//         pointer-events: none;
//     `;
//     document.body.appendChild(overlay);
    
//     setTimeout(() => {
//         overlay.style.opacity = '1';
//         setTimeout(() => {
//             if (overlay.parentNode) {
//                 document.body.removeChild(overlay);
//             }
//             callback();
//         }, duration);
//     }, 10);
// }

// fadeIn(callback, duration = 200) { // 200ms - –µ—â–µ –±—ã—Å—Ç—Ä–µ–µ
//     const overlay = document.createElement('div');
//     overlay.style.cssText = `
//         position: fixed; 
//         top: 0; 
//         left: 0; 
//         width: 100%; 
//         height: 100%; 
//         background: black; 
//         z-index: 9999;
//         opacity: 1; 
//         transition: opacity ${duration}ms ease-in; /* ease-in –±—ã—Å—Ç—Ä–µ–µ */
//         pointer-events: none;
//     `;
//     document.body.appendChild(overlay);
    
//     setTimeout(() => {
//         overlay.style.opacity = '0';
//         setTimeout(() => {
//             if (overlay.parentNode) {
//                 document.body.removeChild(overlay);
//             }
//             callback();
//         }, duration);
//     }, 10);
// }
    
    animate() {
        requestAnimationFrame(() => this.animate());
        
        this.controls.update();
        this.updateHotspots();
        this.renderer.render(this.scene, this.camera);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new VirtualMuseum();
});